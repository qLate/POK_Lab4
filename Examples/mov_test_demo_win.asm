; Приклади команд пересилки даних. Відповідає главі "Команди пересилки даних"
;Також демонструються різні способи адресації

include 'win32ax.inc'

.code
    
start:  
        ;Пересилаємо в регістр безпосереднє значення
        mov     eax,12345678h   
        ;Код команди      B8  78 56 34 12 (увага!)
        mov     ax,1234h
        ;Код команди   66 B8  34 12   
        
        ;Проаналізуємо першу команду, враховуючи що:
        ;-програма виконується в 32-му сегменті коду (це програма для Windows)
        ;-Тому по замовчуванню використовуються 32-х бітні регістри - eax,ebx і т.д.
        ;Отож
        ; B8 -- код команди "переслати в регістр eax беспосереднє значення, 
        ;            що задається наступними 32-ма бітами або 4-ма байтами" 
        ; 78 56 34 12 -- число яке буде записано в eax.
        ; Зверніть увагу на зворотній порядок байтів -- від молодшого до старшого
        ;
        ;Друга з тих що розглядаються команда працює з 16-бітним регітром.
        ;В 32-х бітному режимі для цього необхідно використати префікс зміни розрядності даних
        ;який має код 66h
        ;Тому код команди виглядає так:
        ;66 -- префікс переключення розрядності даних. 
        ;   В 32-му сегменті коду означає використання 16-біттних даних.
        ;   (Його називають префіксом переключення тому що в 16-бітному 
        ;   сегметі він задає використання 32-бітних даних та регістрів)
        ;B8 -- код команди покласти в eax наступних 32 біта (!той самий що і в попередній команді!)
        ;   за рахунок префікса він інтерпретується як покласти в ax наступних 16 біт (2 байти)
        ;34 12 -- число яке буде записано в ax.
        ;==> Детальніше див. главу "Розрядність даних та адресів. Префікси модифікації"
        
        mov     al,12h
        ;Код -- B0 12  -- жодного відношення до кодів попередніх команд :-)
    
        ;Пересилка сегментного регістра в регістр загального призначення
        mov     ax,ds
        ;Та в память
        mov         word [first],ds
        ;mov        ds,word [first]
    
        mov     ebx,first
        mov     edx,0       
        mov         ecx,[ebx+2*edx+5];
        ;Приклад базово-індексної адресації зі зміщенням
        ;ebx - база
        ;edx - індекс з масштабом 2
        ;5 - зміщення

        xchg        al,bl
        ;Обмін значеннь що зберігаютьсяв al і bl
        
        xchg        eax,ebx
        ;Код: 93
        xchg        ax,bx
        ;Код: 66 93
        ;Як бачимо -- знову префікс зміни розрядності даних
    
        mov     ebx, first
        mov     al, 0
        ;xlat       [fs:ebx]
        xlat        [es:ebx]
    
		clts 
		
        lds     esi, fword [tofs]
        les     esi, fword [tofs]
        lss     esi, fword [tofs]	; bug in fasmg for ss, fs, gs
        lfs     esi, fword [tofs]
        lgs     esi, fword [tofs]
        ;Завантаження в fs селектора і в esi -- зміщення з пам'яті однією командою

        lahf
        ;Вміст прапорців ==> ah
        salc
        ;Недокументована але присутня в процесорах фірми Intel команда
        ;Документована для x86-сумісних процесорів фірми AMD
        ;Називається Set AL on Carry -- встановити AL якщо перенос
        ;Встановлює всі біти AL в значення, яке знаходиться в CF
    
        mov     eax,17h;
        stc
        ;Встановити прапорець переносу
        sbb     eax,5h
        ;Відняти від eax 5h враховуючи що відбувається позичання одиниці тому що CF=1
        ;Результат = 11h 

        mov     eax,17h;
        clc
        ;Скидаємо прапорець переносу
        sbb     eax,5h
        ;Результат = 12h 

        invoke  ExitProcess,0

.data
    
first       DD  11h 
second  DD  12h
third       DD  13h

tofs        DD  111h
tseg        DW  22h
.end start
